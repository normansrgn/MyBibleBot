const cron = require("node-cron");
const fs = require("fs");
const path = require("path");

const FILE_PATH = path.join(__dirname, "activeChats.json");

const endings = [
  "–ü—É—Å—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ –ø—Ä–∏–Ω–µ—Å—É—Ç —Ç–≤–æ–µ–π –¥—É—à–µ –ø–æ–∫–æ–π –∏ —Å–≤–µ—Ç.",
  "–ü—É—Å—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ –Ω–∞–ø–æ–º–Ω—è—Ç –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ª—é–±–∏–º –∏ –Ω–µ –æ–¥–∏–Ω.",
  "–ü—É—Å—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ —Å—Ç–∞–Ω—É—Ç –¥–ª—è —Ç–µ–±—è —Ç–∏—Ö–∏–º —É—Ç–µ—à–µ–Ω–∏–µ–º –≤ —Å—É–µ—Ç–µ –¥–Ω—è.",
  "–ü—É—Å—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ —Å–æ–≥—Ä–µ—é—Ç —Ç–≤–æ–µ —Å–µ—Ä–¥—Ü–µ –∏ —É–∫—Ä–µ–ø—è—Ç –Ω–∞–¥–µ–∂–¥—É.",
  "–ü—É—Å—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ –ø—Ä–æ–±—É–¥—è—Ç –≤–µ—Ä—É –≤ —Ç–µ–±–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Å–ª–∞–±–ª–∞.",
  "–ü—É—Å—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ –Ω–∞–ø–æ–ª–Ω—è—Ç —Ç–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä —Ç–∏—à–∏–Ω–æ–π.",
  "–ü—É—Å—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ –≤–¥–æ—Ö–Ω–æ–≤—è—Ç –∏–¥—Ç–∏ —Ç–µ–±—è –≤–ø–µ—Ä—ë–¥, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∏ –Ω–∞ —á—Ç–æ.",
  "–ü—É—Å—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ —Å—Ç–∞–Ω—É—Ç –≥–ª–æ—Ç–∫–æ–º –∂–∏–≤–æ–π –≤–æ–¥—ã –¥–ª—è —Ç–≤–æ–µ–π –¥—É—à–∏.",
  "–ü—É—Å—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ –Ω–∞–ø–æ–º–Ω—è—Ç —Ç–µ–±–µ: –ë–æ–≥ —Ä—è–¥–æ–º, –¥–∞–∂–µ –≤ –º–æ–ª—á–∞–Ω–∏–∏.",
  "–ü—É—Å—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ –æ—Ç–∫—Ä–æ—é—Ç —Ç–∏—Ö—É—é —Å–∏–ª—É –ë–æ–∂—å–µ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è.",
];

function getRandomVerse(bibleData) {
  if (!Array.isArray(bibleData)) {
    console.error("‚ùå bibleData –Ω–µ –º–∞—Å—Å–∏–≤");
    return {
      bookName: "–û—à–∏–±–∫–∞",
      chapter: 0,
      verse: 0,
      text: "–î–∞–Ω–Ω—ã–µ –ë–∏–±–ª–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.",
    };
  }

  const validBooks = bibleData.filter(
    (book) => Array.isArray(book.chapters) && book.chapters.length > 0
  );

  if (validBooks.length === 0) {
    return {
      bookName: "–û—à–∏–±–∫–∞",
      chapter: 0,
      verse: 0,
      text: "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–Ω–∏–≥ —Å –≥–ª–∞–≤–∞–º–∏.",
    };
  }

  let attempts = 0;

  while (attempts < 10) {
    const book = validBooks[Math.floor(Math.random() * validBooks.length)];
    const chapterIndex = Math.floor(Math.random() * book.chapters.length);
    const chapter = book.chapters[chapterIndex];
    const verseIndex = Math.floor(Math.random() * chapter.length);
    const verseText = chapter[verseIndex];

    let fullText = verseText;
    let finalVerseIndex = verseIndex;

    if (
      verseText.length < 80 &&
      !/[.!?‚Ä¶]$/.test(verseText.trim()) &&
      verseIndex + 1 < chapter.length
    ) {
      fullText += " " + chapter[verseIndex + 1];
      finalVerseIndex = verseIndex + 1;
    }

    return {
      bookName: book.name,
      chapter: chapterIndex + 1,
      verse: verseIndex + 1,
      text: fullText,
    };
  }

  const fallbackBook = validBooks[0];
  return {
    bookName: fallbackBook.name,
    chapter: 1,
    verse: 1,
    text: fallbackBook.chapters[0][0],
  };
}

function getRandomEnding() {
  return endings[Math.floor(Math.random() * endings.length)];
}

function capitalizeFirstLetter(text) {
  return text.charAt(0).toUpperCase() + text.slice(1);
}

function formatVerse(verse) {
  const capitalizedText = capitalizeFirstLetter(verse.text);

  return `

_"${capitalizedText}"_
_${verse.bookName}_ ${verse.chapter}:${verse.verse}  

üåø _${getRandomEnding()}_
`.trim();
}

function scheduleGroupVerses(bot, bibleData) {
  let activeChats = new Set();


  const recentUpdates = new Map(); 

  if (fs.existsSync(FILE_PATH)) {
    try {
      const saved = JSON.parse(fs.readFileSync(FILE_PATH, "utf-8"));
      activeChats = new Set(saved);
      console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${activeChats.size} —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞`);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:", err.message);
    }
  }

  function saveActiveChats() {
    fs.writeFileSync(FILE_PATH, JSON.stringify([...activeChats], null, 2));
  }

  bot.on("my_chat_member", (msg) => {
  const chatId = msg.chat.id;
  const status = msg.new_chat_member?.status;

  if (status === "member" || status === "administrator") {
    if (!activeChats.has(chatId)) {
      activeChats.add(chatId);
      saveActiveChats();
      console.log(`‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç: ${chatId}`);
    }
  }

  if (status === "left" || status === "kicked") {
    if (activeChats.has(chatId)) {
      activeChats.delete(chatId);
      saveActiveChats();
      console.log(`‚ùå –ë–æ—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —á–∞—Ç–∞: ${chatId}`);
    }
  }
});

  function isAllowedHour() {
    const hour = new Date().getHours();
    return hour >= 7 && hour <= 23;
  }

  async function sendVerseToChats(chatIds) {
    for (const chatId of chatIds) {
      try {
        if (!Array.isArray(bibleData)) {
          console.error("‚ùå –í sendVerseToChats bibleData –Ω–µ –º–∞—Å—Å–∏–≤!");
          continue;
        }
        const verse = getRandomVerse(bibleData);
        const message = formatVerse(verse);
        await bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
        console.log(`‚úÖ –°—Ç–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç ${chatId}`);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatId}:`, err.message);
      }
    }
  }

  async function sendVerseToAllChats(force = false) {
    if (!force && !isAllowedHour()) {
      console.log("üåô –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî —Å—Ç–∏—Ö–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è");
      return;
    }
    await sendVerseToChats(activeChats);
  }


  cron.schedule("0 */2 * * *", () => {
    console.log("üïí ‚è± –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–∑ –≤ 2 —á–∞—Å–∞...");
    sendVerseToAllChats();
  });

  setTimeout(() => {
    console.log("üöÄ –ü–µ—Ä–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞...");
    sendVerseToAllChats(true);
  }, 5000);


  bot.onText(/\/test_verse/, async (msg) => {
    const chatId = msg.chat.id;
    const verse = getRandomVerse(bibleData);
    await bot.sendMessage(chatId, `üß™ *–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∏—Ö:*\n\n${formatVerse(verse)}`, {
      parse_mode: "Markdown",
    });
  });

  console.log("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω—ã");
}

module.exports = { scheduleGroupVerses };