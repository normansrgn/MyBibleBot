require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");
const fs = require("fs");
const path = require("path");

const token = process.env.BOT_TOKEN;
if (!token) {
  console.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env");
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

const { setupVerseMentionHandler } = require("./verseMentionHandler");

let raw;
try {
  raw = fs.readFileSync(path.join(__dirname, "bible.json"), "utf8");
  if (raw.charCodeAt(0) === 0xfeff) raw = raw.slice(1);
} catch (err) {
  console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è bible.json:", err.message);
  process.exit(1);
}
const bibleData = JSON.parse(raw);

setupVerseMentionHandler(bot, bibleData, searchVerse, formatVerse, formatChapter);

const newTestamentStartIndex = bibleData.findIndex(
  (book) => book.name.toLowerCase() === "–æ—Ç –º–∞—Ç—Ñ–µ—è"
);
const oldTestamentBooks =
  newTestamentStartIndex === -1
    ? bibleData
    : bibleData.slice(0, newTestamentStartIndex);
const newTestamentBooks =
  newTestamentStartIndex === -1 ? [] : bibleData.slice(newTestamentStartIndex);

const activeUsers = new Set();
const userState = new Map();

const mainReplyKeyboard = {
  reply_markup: {
    keyboard: [
      ["üôè –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö", "üìñ –ß–∏—Ç–∞—Ç—å –ë–∏–±–ª–∏—é"],
      ["üîç –ü–æ–∏—Å–∫", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  },
};

const backToBooksKeyboard = {
  reply_markup: {
    keyboard: [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–∞–º"], ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
    resize_keyboard: true,
    one_time_keyboard: true,
  },
};

const testamentInlineKeyboard = {
  inline_keyboard: [
    [
      { text: "üìú –í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç", callback_data: "testament_old" },
      { text: "‚úùÔ∏è –ù–æ–≤—ã–π –ó–∞–≤–µ—Ç", callback_data: "testament_new" },
    ],
  ],
};

function getRandomVerse() {
  const book = bibleData[Math.floor(Math.random() * bibleData.length)];
  const chapterIndex = Math.floor(Math.random() * book.chapters.length);
  const chapter = book.chapters[chapterIndex];
  const verseIndex = Math.floor(Math.random() * chapter.length);
  return {
    bookName: book.name,
    chapter: chapterIndex + 1,
    verse: verseIndex + 1,
    text: chapter[verseIndex],
  };
}

function formatVerse({ bookName, chapter, verse, text }) {
  return `_"${text}"_\n\n${bookName} ${chapter}:${verse}`;
}

function splitChapterIntoParts(book, chapterNumber) {
  const chapterIndex = chapterNumber - 1;
  if (!book || !book.chapters[chapterIndex]) return [];

  const verses = book.chapters[chapterIndex];
  const parts = [];
  let currentPart = `üìñ *${book.name}* ‚Äî –≥–ª–∞–≤–∞ ${chapterNumber}\n\n`;

  for (let i = 0; i < verses.length; i++) {
    const line = `${i + 1}. ${verses[i]}\n`;
    if ((currentPart + line).length > 4000) {
      parts.push(currentPart.trim());
      currentPart = "";
    }
    currentPart += line;
  }

  if (currentPart) parts.push(currentPart.trim());
  return parts;
}

function normalizeBookName(name) {
  return name.toLowerCase().replace(/\s+/g, "");
}

function levenshtein(a, b) {
  const m = a.length;
  const n = b.length;
  const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));
  for (let i = 0; i <= m; i++) dp[i][0] = i;
  for (let j = 0; j <= n; j++) dp[0][j] = j;
  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      const cost = a[i - 1] === b[j - 1] ? 0 : 1;
      dp[i][j] = Math.min(
        dp[i - 1][j] + 1,
        dp[i][j - 1] + 1,
        dp[i - 1][j - 1] + cost
      );
    }
  }
  return dp[m][n];
}

function findClosestBookName(inputName) {
  const normalizedInput = normalizeBookName(inputName);
  let closestBook = null;
  let minDistance = Infinity;

  for (const book of bibleData) {
    const normalizedBook = normalizeBookName(book.name);
    const distance = levenshtein(normalizedInput, normalizedBook);
    if (distance < minDistance) {
      minDistance = distance;
      closestBook = book;
    }
  }

  return minDistance <= 5 ? closestBook : null;
}


function searchVerse(query) {
  const regex = /^(\d?\s*[–∞-—è–ê-–Ø—ë–Å\s]+)\s+(\d+)(?::(\d+)(?:-(\d+))?)?$/i;
  const match = query.match(regex);

  if (match) {
    let [, bookNameRaw, chapterStr, verseStr, verseEndStr] = match;
    const bookName = normalizeBookName(bookNameRaw);
    const chapter = parseInt(chapterStr, 10);
    const verse = verseStr ? parseInt(verseStr, 10) : null;
    const verseEnd = verseEndStr ? parseInt(verseEndStr, 10) : null;

    let book = bibleData.find(
      (b) =>
        normalizeBookName(b.name) === bookName ||
        normalizeBookName(b.name).includes(bookName)
    );

    if (!book) {
      book = findClosestBookName(bookName);
    }
    if (!book) return null;

    const chapterIndex = chapter - 1;
    const chapterData = book.chapters[chapterIndex];
    if (!chapterData) return null;

    if (verse && verseEnd) {
      const verses = chapterData.slice(verse - 1, verseEnd);
      if (!verses.length) return null;
      return {
        bookName: book.name,
        chapter,
        verses: verses.map((text, i) => ({
          verse: verse + i,
          text,
        })),
      };
    }

    if (verse) {
      const verseIndex = verse - 1;
      const text = chapterData[verseIndex];
      if (!text) return null;
      return {
        bookName: book.name,
        chapter,
        verse,
        text,
      };
    }

    return {
      book: book,
      chapter: chapter,
    };
  }

  const results = [];
  for (const book of bibleData) {
    for (let i = 0; i < book.chapters.length; i++) {
      const chapter = book.chapters[i];
      for (let j = 0; j < chapter.length; j++) {
        const verseText = chapter[j];
        if (verseText.toLowerCase().includes(query.toLowerCase())) {
          results.push({
            bookName: book.name,
            chapter: i + 1,
            verse: j + 1,
            text: verseText,
          });
          if (results.length >= 5) return results;
        }
      }
    }
  }

  return results.length ? results : null;
}

function formatChapter(book, chapterNumber) {
  const parts = splitChapterIntoParts(book, chapterNumber);
  return parts[0] || "–ì–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
}

function getBooksInlineKeyboard(books) {
  const keyboard = [];
  for (let i = 0; i < books.length; i += 3) {
    const row = books.slice(i, i + 3).map((book) => ({
      text: book.name,
      callback_data: `book_${book.name}`,
    }));
    keyboard.push(row);
  }
  keyboard.push([
    { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ó–∞–≤–µ—Ç–∞", callback_data: "back_to_testament" },
  ]);
  return { inline_keyboard: keyboard };
}

function getChaptersInlineKeyboard(bookName) {
  const book = bibleData.find((b) => b.name === bookName);
  if (!book) return null;
  const chaptersCount = book.chapters.length;
  const keyboard = [];
  for (let i = 1; i <= chaptersCount; i += 5) {
    const row = [];
    for (let j = i; j < i + 5 && j <= chaptersCount; j++) {
      row.push({
        text: j.toString(),
        callback_data: `chapter_${bookName}_${j}`,
      });
    }
    keyboard.push(row);
  }
  keyboard.push([
    { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–∞–º", callback_data: "back_to_books" },
  ]);
  return { inline_keyboard: keyboard };
}

function getStartMessage() {
  return `üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∏—â—É—â–∏–π —Å–≤–µ—Ç–∞! üåø

üìú ‚Äú–°–ª–æ–≤–æ –¢–≤–æ–µ ‚Äî —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫ –Ω–æ–≥–µ –º–æ–µ–π –∏ —Å–≤–µ—Ç —Å—Ç–µ–∑–µ –º–æ–µ–π.‚Äù (–ü—Å–∞–ª—Ç–∏—Ä—å 118:105)

–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –≤–∞—à —Å–ø—É—Ç–Ω–∏–∫ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –ø–æ –°–≤—è—â–µ–Ω–Ω–æ–º—É –ü–∏—Å–∞–Ω–∏—é. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
üåü –ù–∞—Ö–æ–¥–∏—Ç—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç–∏—Ö–∞—Ö
üìú –ü–æ–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ —á—Ç–µ–Ω–∏–µ –ë–∏–±–ª–∏–∏ –ø–æ –≥–ª–∞–≤–∞–º
üîç –ò—Å–∫–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∏—Ö–∏, —á—Ç–æ–±—ã –ø—Ä–∏–∫–æ—Å–Ω—É—Ç—å—Å—è –∫ –ë–æ–∂—å–µ–º—É –°–ª–æ–≤—É

–ü—É—Å—Ç—å –≤–∞—à–µ —Å–µ—Ä–¥—Ü–µ –Ω–∞–ø–æ–ª–Ω–∏—Ç—Å—è –º–∏—Ä–æ–º! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:`;
}

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  activeUsers.add(chatId);
  try {
    await bot.sendMessage(chatId, getStartMessage(), {
      parse_mode: "Markdown",
      ...mainReplyKeyboard,
    });
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ /start (chat ${chatId}):`, err.message);
  }
});

bot.onText(/\/search/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    await bot.sendMessage(
      chatId,
      `üîç *–ü–æ–∏—Å–∫ –ø–æ –ë–∏–±–ª–∏–∏*\n
–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤:
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –∏–ª–∏ —Å—Ç–∏—Ö–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, _–ò–æ–∞–Ω–Ω–∞ 3:16_ –∏–ª–∏ _–ë—ã—Ç–∏–µ 1_)
‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–∏—Ö–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, _–≤–æ–∑–ª—é–±–∏ –±–ª–∏–∂–Ω–µ–≥–æ_)

_–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ 5 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤._`,
      {
        parse_mode: "Markdown",
        ...mainReplyKeyboard,
      }
    );
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ /search (chat ${chatId}):`, err.message);
  }
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  if (msg.chat.type !== 'private') return;
  activeUsers.add(chatId);

  try {
    if (text === "üôè –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö") {
      const verse = getRandomVerse();
      await bot.sendMessage(chatId, formatVerse(verse), {
        parse_mode: "Markdown",
        ...mainReplyKeyboard,
      });
    } else if (text === "üìñ –ß–∏—Ç–∞—Ç—å –ë–∏–±–ª–∏—é") {
      await bot.sendMessage(chatId, "üìñ *–í—ã–±–µ—Ä–∏—Ç–µ –ó–∞–≤–µ—Ç:*", {
        parse_mode: "Markdown",
        reply_markup: testamentInlineKeyboard,
      });
    } else if (text === "üîç –ü–æ–∏—Å–∫") {
      await bot.sendMessage(
        chatId,
        `üîç *–ü–æ–∏—Å–∫ –ø–æ –ë–∏–±–ª–∏–∏*\n
–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤:
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –∏–ª–∏ —Å—Ç–∏—Ö–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, _–ò–æ–∞–Ω–Ω–∞ 3:16_ –∏–ª–∏ _–ë—ã—Ç–∏–µ 1_)
‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–∏—Ö–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, _–≤–æ–∑–ª—é–±–∏ –±–ª–∏–∂–Ω–µ–≥–æ_)

_–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ 5 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤._`,
        {
          parse_mode: "Markdown",
          ...mainReplyKeyboard,
        }
      );
    } else if (text === "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
      userState.delete(chatId);
      await bot.sendMessage(chatId, getStartMessage(), {
        parse_mode: "Markdown",
        ...mainReplyKeyboard,
      });
    } else if (text === "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–∞–º") {
      const testament = userState.get(chatId) || "old";
      const books = testament === "old" ? oldTestamentBooks : newTestamentBooks;
      await bot.sendMessage(
        chatId,
        testament === "old"
          ? "üìú *–í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:*"
          : "‚úùÔ∏è *–ù–æ–≤—ã–π –ó–∞–≤–µ—Ç ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:*",
        {
          parse_mode: "Markdown",
          reply_markup: getBooksInlineKeyboard(books),
        }
      );
    } else {
      const me = await bot.getMe();
      if (text.includes(`@${me.username}`)) {
        return; // –µ—Å–ª–∏ —ç—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ verseMentionHandler.js
      }

      const result = searchVerse(text);
      if (result) {
        if (Array.isArray(result)) {
          for (const verse of result) {
            await bot.sendMessage(chatId, formatVerse(verse), {
              parse_mode: "Markdown",
              ...mainReplyKeyboard,
            });
          }
        } else if (result.verses) {
          const versesText = result.verses
            .map((v) => `${v.verse}. ${v.text}`)
            .join("\n");
          const message = `üìñ *${result.bookName}* ${result.chapter}:${
            result.verses[0].verse
          }-${
            result.verses[result.verses.length - 1].verse
          }\n\n_${versesText}_`;
          await bot.sendMessage(chatId, message, {
            parse_mode: "Markdown",
            ...mainReplyKeyboard,
          });
        } else if (result.verse) {
          await bot.sendMessage(chatId, formatVerse(result), {
            parse_mode: "Markdown",
            ...mainReplyKeyboard,
          });
        } else {
          const chapterText = formatChapter(result.book, result.chapter);
          await bot.sendMessage(chatId, chapterText, {
            parse_mode: "Markdown",
            ...mainReplyKeyboard,
          });
        }
      } else if (!["/start", "/search"].includes(text)) {
        await bot.sendMessage(
          chatId,
          '‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò–æ–∞–Ω–Ω–∞ 3:16", "–ë—ã—Ç–∏–µ 1" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É –∏–∑ —Å—Ç–∏—Ö–∞.',
          {
            parse_mode: "Markdown",
            ...mainReplyKeyboard,
          }
        );
      }
    }
  } catch (err) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è (chat ${chatId}, text: ${text}):`,
      err.message
    );
    await bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

bot.on("callback_query", async (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;

  try {
    if (data.startsWith("book_")) {
      const bookName = data.slice(5);
      const keyboard = getChaptersInlineKeyboard(bookName);
      if (!keyboard) {
        await bot.answerCallbackQuery(query.id, { text: "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });
        return;
      }
      await bot.editMessageText(
        `–í—ã–±—Ä–∞–Ω–∞ –∫–Ω–∏–≥–∞: *${bookName}*\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É:`,
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: "Markdown",
          reply_markup: keyboard,
        }
      );
    } else if (data.startsWith("chapter_part_")) {
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —á–∞—Å—Ç—è–º –≥–ª–∞–≤—ã
      const partsData = data.split("_");
      const bookName = partsData[2];
      const chapterNumber = parseInt(partsData[3], 10);
      const partIndex = parseInt(partsData[4], 10);
      const book = bibleData.find((b) => b.name === bookName);
      if (!book) {
        await bot.answerCallbackQuery(query.id, { text: "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });
        return;
      }
      const parts = splitChapterIntoParts(book, chapterNumber);
      if (!parts[partIndex]) {
        await bot.answerCallbackQuery(query.id, { text: "–ß–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });
        return;
      }
      const keyboard = getChapterPartKeyboard(
        bookName,
        chapterNumber,
        partIndex,
        parts.length,
        book
      );
      await bot.editMessageText(parts[partIndex], {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: "Markdown",
        reply_markup: keyboard,
      });
    } else if (data.startsWith("chapter_")) {
      // –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤—ã (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å)
      const partsData = data.split("_");
      const bookName = partsData[1];
      let chapterNumber = parseInt(partsData[2], 10);
      const bookIndex = bibleData.findIndex((b) => b.name === bookName);
      if (bookIndex === -1) {
        await bot.answerCallbackQuery(query.id, { text: "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." });
        return;
      }
      const book = bibleData[bookIndex];

      if (chapterNumber > book.chapters.length) {
        if (bookIndex + 1 < bibleData.length) {
          const nextBook = bibleData[bookIndex + 1];
          const keyboard = getChaptersInlineKeyboard(nextBook.name);
          await bot.editMessageText(
            `–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–Ω–∏–≥—É *${book.name}*.\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–µ: *${nextBook.name}*.\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É:`,
            {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: "Markdown",
              reply_markup: keyboard,
            }
          );
        } else {
          await bot.editMessageText(
            `–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–∏–≥–∏ *${book.name}*.\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–Ω–∏–≥–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —á—Ç–µ–Ω–∏–µ.`,
            {
              chat_id: chatId,
              message_id: messageId,
              parse_mode: "Markdown",
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–∞–º",
                      callback_data: "back_to_books",
                    },
                  ],
                ],
              },
            }
          );
        }
        await bot.answerCallbackQuery(query.id);
        return;
      }

      const parts = splitChapterIntoParts(book, chapterNumber);
      const keyboard = getChapterPartKeyboard(
        bookName,
        chapterNumber,
        0,
        parts.length,
        book
      );
      await bot.editMessageText(parts[0], {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: "Markdown",
        reply_markup: keyboard,
      });
    } else if (data === "back_to_books") {
      const testament = userState.get(chatId) || "old";
      const books = testament === "old" ? oldTestamentBooks : newTestamentBooks;
      await bot.editMessageText(
        testament === "old"
          ? "üìú *–í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:*"
          : "‚úùÔ∏è *–ù–æ–≤—ã–π –ó–∞–≤–µ—Ç ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:*",
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: "Markdown",
          reply_markup: getBooksInlineKeyboard(books),
        }
      );
    } else if (data === "back_to_testament") {
      await bot.editMessageText("üìñ *–í—ã–±–µ—Ä–∏—Ç–µ –ó–∞–≤–µ—Ç:*", {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: "Markdown",
        reply_markup: testamentInlineKeyboard,
      });
    } else if (data === "testament_old") {
      userState.set(chatId, "old");
      await bot.editMessageText("üìú *–í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:*", {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: "Markdown",
        reply_markup: getBooksInlineKeyboard(oldTestamentBooks),
      });
    } else if (data === "testament_new") {
      userState.set(chatId, "new");
      await bot.editMessageText("‚úùÔ∏è *–ù–æ–≤—ã–π –ó–∞–≤–µ—Ç ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:*", {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: "Markdown",
        reply_markup: getBooksInlineKeyboard(newTestamentBooks),
      });
    }

    await bot.answerCallbackQuery(query.id);
  } catch (err) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback (chat ${chatId}, data: ${data}):`,
      err.message
    );
    await bot.answerCallbackQuery(query.id, {
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    });
  }
});

function sendDailyVerse() {
  const verse = getRandomVerse();
  const text = `‚ú® *–î–Ω–µ–≤–Ω–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ* ‚ú®\n\n${formatVerse(
    verse
  )}\n\n_–ü—É—Å—Ç—å —Å–ª–æ–≤–æ –ë–æ–∂—å–µ –æ—Å–≤–µ—â–∞–µ—Ç –≤–∞—à –¥–µ–Ω—å!_`;
  activeUsers.forEach((chatId) => {
    bot.sendMessage(chatId, text, { parse_mode: "Markdown" }).catch((err) => {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏—Ö–∞ (chat ${chatId}):`, err.message);
      activeUsers.delete(chatId);
    });
  });
}

cron.schedule("0 9 * * *", sendDailyVerse, { timezone: "Europe/Moscow" });
cron.schedule("0 15 * * *", sendDailyVerse, { timezone: "Europe/Moscow" });
cron.schedule("0 21 * * *", sendDailyVerse, { timezone: "Europe/Moscow" });

bot.on("polling_error", (err) => {
  console.error("Polling error:", err.message);
  setTimeout(() => {
    bot.stopPolling().then(() => bot.startPolling());
  }, 5000);
});

bot.on('inline_query', async (query) => {
  const q = query.query.trim();
  if (!q) return;

  const results = [];
  const found = searchVerse(q);

  if (Array.isArray(found)) {
    found.forEach((verse, index) => {
      results.push({
        type: 'article',
        id: String(index),
        title: `${verse.bookName} ${verse.chapter}:${verse.verse}`,
        input_message_content: {
          message_text: formatVerse(verse),
          parse_mode: 'Markdown',
        },
        description: verse.text.slice(0, 100),
      });
    });
  } else if (found && found.verse) {
    results.push({
      type: 'article',
      id: '1',
      title: `${found.bookName} ${found.chapter}:${found.verse}`,
      input_message_content: {
        message_text: formatVerse(found),
        parse_mode: 'Markdown',
      },
      description: found.text.slice(0, 100),
    });
  }

  if (results.length > 0) {
    bot.answerInlineQuery(query.id, results.slice(0, 10));
  }
});

console.log("‚ú® –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ‚ú®");

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —á–∞—Å—Ç—è–º –≥–ª–∞–≤—ã
function getChapterPartKeyboard(
  bookName,
  chapterNumber,
  partIndex,
  partsCount,
  book
) {
  const buttons = [];
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —á–∞—Å—Ç—è–º –≥–ª–∞–≤—ã
  if (partsCount > 1) {
    const navRow = [];
    if (partIndex > 0)
      navRow.push({
        text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data: `chapter_part_${bookName}_${chapterNumber}_${
          partIndex - 1
        }`,
      });
    navRow.push({
      text: `${partIndex + 1}/${partsCount}`,
      callback_data: "noop",
    });
    if (partIndex < partsCount - 1)
      navRow.push({
        text: "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
        callback_data: `chapter_part_${bookName}_${chapterNumber}_${
          partIndex + 1
        }`,
      });
    buttons.push(navRow);
  }
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≥–ª–∞–≤–∞–º
  const chapterNavRow = [];
  if (chapterNumber > 1)
    chapterNavRow.push({
      text: "‚¨ÖÔ∏è –ü—Ä–µ–¥. –≥–ª–∞–≤–∞",
      callback_data: `chapter_${bookName}_${chapterNumber - 1}`,
    });
  if (chapterNumber < book.chapters.length)
    chapterNavRow.push({
      text: "–°–ª–µ–¥. –≥–ª–∞–≤–∞ ‚û°Ô∏è",
      callback_data: `chapter_${bookName}_${chapterNumber + 1}`,
    });
  if (chapterNavRow.length) buttons.push(chapterNavRow);
  // –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
  buttons.push([
    { text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–∞–º", callback_data: `book_${bookName}` },
  ]);
  buttons.push([{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–∞–º", callback_data: "back_to_books" }]);
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –≥–ª–∞–≤–∞
  if (chapterNumber === book.chapters.length) {
    const bookIdx = bibleData.findIndex((b) => b.name === bookName);
    if (bookIdx + 1 < bibleData.length) {
      const nextBook = bibleData[bookIdx + 1];
      buttons.push([
        {
          text: `‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–µ: ${nextBook.name}`,
          callback_data: `book_${nextBook.name}`,
        },
      ]);
    }
  }
  return { inline_keyboard: buttons };
}
